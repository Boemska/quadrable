lib
  - proof suitable for deletion (uses witnessLeafs instead of witnesses where necessary)
    - WitnessBranch
  ? ability to compact tree to ensure node Ids are sequential
  ? try putting leaves in their own node key-space to improve locality of interior nodes
  ? maybe way to avoid needing to store stuff in lmdb to validate a proof?
  ? ability to set resource limits on proof sizes when verifying (setMaxProofCmds?)
  ? ability to discard intermediate nodes to save disk-space, since they can be re-computed

solidity impl

docs
  - auto generate TOC
  - two reasons to hash val in leafs: guarantee sizeof(leaf) != sizeof(node), and make it so you don't need to provide potentially large vals during non-existence proofs
  - key hash suffixes of empty witnesses are 0'd out: optimization for evm
  - adversarial proof bloating
    - mine 2 values with common N-bit prefix (can use birthday attacks)
  - encoding (lack thereof) used for keys/vals
    - no length limits, not even keys (because stored as hashes)
  - proof encoding starts at end, because first must be merged last, and because negative numbers have larger range in twos complement
